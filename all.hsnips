global
	function math(context) {
		return context.scopes.some(s => s.startsWith("meta.math"));
	}
	function myImport(libraryPath){
		'use strict';
		
		const { spawnSync } = require( 'child_process' );
		const exec = spawnSync( 'npm', [ 'root', '-g' ] );
		
		const globalPath = exec.stdout.toString().trim();

		return require(globalPath+libraryPath);
	}

	const vecToPmat = (input) =>{
		input = JSON.parse(input);
		let output = "";
		for (const row of input) {
			for (const col of row) {
				output += col+"&";
			}
			output = output.slice(0, -1);
			output += '\\\\\n';
		}
		output = output.slice(0, -3);
		return JSON.stringify(output).slice(1,-1).replace(/\\n/g,'\n');
	}

endglobal

context math(context)
snippet inv "inverse" Ai
^{-1}
endsnippet

snippet template "Basic template" b
\documentclass[a4paper,twocolumn]{article}

\usepackage[spanish]{babel}
\usepackage[utf8]{inputenc}
\usepackage{amsmath,amssymb}
\usepackage{parskip}
\usepackage{graphicx}

% Margins
\usepackage[top=2.5cm, left=3cm, right=3cm, bottom=4.0cm]{geometry}
% Colour table cells
\usepackage[table]{xcolor}

% figure support

%%%%%%%%%%%%%%%%%
%     Title     %
%%%%%%%%%%%%%%%%%
\title{$1}
\author{Luis Fernando Ríos Álvarez \\\
	Universidad Nacional de Asunción\\\
	Facultad Politécnica\\\
	luis.fer334@fpuna.edu.py\\\
}
\date{\today}

\begin{document}
	\maketitle
	$0
\end{document}
endsnippet

snippet beg "begin{} / end{}" bA
\\begin{$1}
	$0
\\end{$1}
endsnippet

priority 100
snippet ... "ldots" iA
\ldots
endsnippet

snippet table "Table environment" b
\begin{table}[${1:htpb}]
	\centering
	\caption{${2:caption}}
	\label{tab:${3:label}}
	\begin{tabular}{${5:c}}
	$0${5/((?<=.)c|l|r)|./(?1: & )/g}
	\end{tabular}
\end{table}
endsnippet

snippet fig "Figure environment" b
\begin{figure}[${1:htpb}]
	\centering
	${2:\includegraphics[width=0.8\textwidth]{$3}}
	\caption{${4:$3}}
	\label{fig:${5:${3/\W+/-/g}}}
\end{figure}
endsnippet

snippet enum "Enumerate" bA
\begin{enumerate}
	\item $0
\end{enumerate}
endsnippet

snippet item "Itemize" bA
\begin{itemize}
	\item $0
\end{itemize}
endsnippet

snippet desc "Description" b
\begin{description}
	\item[$1] $0
\end{description}
endsnippet

snippet pac "Package" b
\usepackage[${1:options}]{${2:package}}$0
endsnippet

snippet => "implies" Ai
\implies
endsnippet

snippet =< "implied by" Ai
\impliedby
endsnippet

context math(context)
snippet iff "iff" Ai
\iff
endsnippet

snippet mk "Math" wA
$${1}$$2
endsnippet

snippet dm "Math" wA
\[
	${1:${VISUAL}}
.\] $0
endsnippet

snippet ali "Align" bA
\begin{align*}
	${1:${VISUAL}}
.\end{align*}
endsnippet


context math(context)
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

snippet / "Fraction" i
\\frac{${VISUAL}}{$1}$0
endsnippet

context math(context)
snippet `((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/` "symbol frac" wA
\\frac{``rv = m[1]``}{$1}$0
endsnippet

priority 1000
context math(context)
snippet `^.*\)/` "() frac" wA
``
    m = m[0]
    rv = m.split('(')[0] +"\\frac{"  + m.split('(')[1].split(')')[0] + "}"
``{$1}$0
endsnippet

context math(context)
snippet `([A-Za-z])(\d)` "auto subscript" wA
`` rv = m[1]``_`` rv = m[2]``
endsnippet

context math(context)
snippet `([A-Za-z])_(\d\d)` "auto subscript2" wA
`` rv = m[1]``_{`` rv = m[2]``}
endsnippet


# snippet sympy "sympyblock " w
# sympy $1 sympy$0
# endsnippet
# 
# priority 10000
# snippet 'sympy(.*)sympy' "sympy" wr
# `
# from sympy import *
# x, y, z, t = symbols('x y z t')
# k, m, n = symbols('k m n', integer=True)
# f, g, h = symbols('f g h', cls=Function)
# init_printing()
# rv = eval('latex(' + m[1].replace('\\', '').replace('^', '**').replace('{', '(').replace('}', ')') + ')')
# `
# endsnippet
# 
# priority 1000
# snippet math "mathematicablock" w
# math $1 math$0
# endsnippet

# priority 10000
# snippet `math(.*)math' "math" wr
# `
# import subprocess
# code = m[1]
# code = 'ToString[' + code + ', TeXForm]'
# rv = subprocess.check_output(['wolframscript', '-code', code])
# `
# endsnippet

snippet == "equals" iA
&= $1 \\\\
endsnippet

snippet != "equals" iA
\neq 
endsnippet

context math(context)
snippet ceil "ceil" iA
\left\lceil $1 \right\rceil $0
endsnippet

context math(context)
snippet floor "floor" iA
\left\lfloor $1 \right\rfloor$0
endsnippet

snippet pmat "pmat" iA
\begin{pmatrix} 
	$1 
\end{pmatrix} $0
endsnippet

snippet bmat "bmat" iA
\begin{bmatrix} $1 \end{bmatrix} $0
endsnippet

context math(context)
snippet () "left( right)" iA
\left( ${1:${VISUAL}} \right) $0
endsnippet

snippet lr "left( right)" i
\left( ${1:${VISUAL}} \right) $0
endsnippet

snippet lr( "left( right)" wA
\left( ${1:${VISUAL}} \right) $0
endsnippet

snippet lr| "left| right|" wA
\left| ${1:${VISUAL}} \right| $0
endsnippet

snippet lr{} "left\{ right\}" wA
\left\\{ ${1:${VISUAL}} \right\\} $0
endsnippet

snippet lrb "left\{ right\}" i
\left\\{ ${1:${VISUAL}} \right\\} $0
endsnippet

snippet lr[] "left[ right]" i
\left[ ${1:${VISUAL}} \right] $0
endsnippet

snippet lra "leftangle rightangle" iA
\left<${1:${VISUAL}} \right>$0
endsnippet

context math(context)
snippet conj "conjugate" iA
\overline{$1}$0
endsnippet

snippet sum "sum" w
\sum_{n=${1:1}}^{${2:\infty}} ${3:a_n z^n}
endsnippet

snippet taylor "taylor" w
\sum_{${1:k}=${2:0}}^{${3:\infty}} ${4:c_$1} (x-a)^$1 $0
endsnippet

snippet lim "limit" w
\lim_{${1:n} \to ${2:\infty}} 
endsnippet

snippet limsup "limsup" w
\limsup_{${1:n} \to ${2:\infty}} 
endsnippet

snippet prod "product" w
\prod_{${1:n=${2:1}}}^{${3:\infty}} ${4:${VISUAL}} $0
endsnippet

snippet part "d/dx" w
\frac{\partial ${1:V}}{\partial ${2:x}} $0
endsnippet

context math(context)
snippet sq "\sqrt{}" iA
\sqrt{${1:${VISUAL}}} $0
endsnippet

context math(context)
snippet sr "^2" iA
^2
endsnippet

context math(context)
snippet cb "^3" iA
^3
endsnippet

context math(context)
snippet td "to the ... power" iA
^{$1}$0
endsnippet

context math(context)
snippet rd "to the ... power" iA
^{($1)}$0
endsnippet

snippet __ "subscript" iA
_{$1}$0
endsnippet

snippet ooo "\infty" iA
\infty
endsnippet

snippet rij "mrij" i
(${1:x}_${2:n})_{${3:$2}\\in${4:\\N}}$0
endsnippet

snippet <= "leq" iA
\le 
endsnippet

snippet >= "geq" iA
\ge 
endsnippet

context math(context)
snippet EE "geq" iA
\exists 
endsnippet

context math(context)
snippet AA "forall" iA
\forall 
endsnippet

context math(context)
snippet xnn "xn" iA
x_{n}
endsnippet

context math(context)
snippet ynn "yn" iA
y_{n}
endsnippet


context math(context)
snippet xii "xi" iA
x_{i}
endsnippet

context math(context)
snippet yii "yi" iA
y_{i}
endsnippet

context math(context)
snippet xjj "xj" iA
x_{j}
endsnippet

context math(context)
snippet yjj "yj" iA
y_{j}
endsnippet

context math(context)
snippet xp1 "x" iA
x_{n+1}
endsnippet

context math(context)
snippet xmm "x" iA
x_{m}
endsnippet

snippet R0+ "R0+" iA
\\R_0^+
endsnippet

snippet plot "Plot" w
\begin{figure}[$1]
	\centering
	\begin{tikzpicture}
		\begin{axis}[
			xmin= ${2:-10}, xmax= ${3:10},
			ymin= ${4:-10}, ymax = ${5:10},
			axis lines = middle,
		]
			\addplot[domain=$2:$3, samples=${6:100}]{$7};
		\end{axis}
	\end{tikzpicture}
	\caption{$8}
	\label{${9:$8}}
\end{figure}
endsnippet

snippet nn "Tikz node" w
\node[$5] (${1/[^0-9a-zA-Z]//g}${2}) ${3:at (${4:0,0}) }{$${1}$};
$0
endsnippet

context math(context)
snippet mcal "mathcal" iA
\mathcal{$1}$0
endsnippet

snippet lll "l" iA
\ell
endsnippet

context math(context)
snippet nabl "nabla" iA
\nabla 
endsnippet

context math(context)
snippet xx "cross" iA
\times 
endsnippet

priority 100
snippet ** "cdot" iA
\cdot 
endsnippet

context math(context)
snippet norm "norm" iA
\|$1\|$0
endsnippet

priority 100
context math(context)
snippet `(?<!\\)(sin|cos|arccot|cot|csc|ln|log|exp|star|perp)` "ln" wA
\\`` rv = m[1]``
endsnippet

priority 300
context math(context)
snippet dint "integral" wA
\int_{${1:-\infty}}^{${2:\infty}} ${3:${VISUAL}} $0
endsnippet

priority 200
context math(context)
snippet `(?<!\\)(arcsin|arccos|arctan|arccot|arccsc|arcsec|pi|zeta|int)` "ln" wA
\\`` rv = m[1]``
endsnippet


priority 100
context math(context)
snippet -> "to" iA
\to 
endsnippet

priority 200
context math(context)
snippet <-> "leftrightarrow" iA
\leftrightarrow
endsnippet

context math(context)
snippet !> "mapsto" iA
\mapsto 
endsnippet

context math(context)
snippet invs "inverse" iA
^{-1}
endsnippet

context math(context)
snippet compl "complement" iA
^{c}
endsnippet

context math(context)
snippet \\\ "setminus" iA
\setminus
endsnippet

snippet >> ">>" iA
\gg
endsnippet

snippet << "<<" iA
\ll
endsnippet

snippet ~~ "~" iA
\sim 
endsnippet

context math(context)
snippet set "set" wA
\\{$1\\} $0
endsnippet

snippet || "mid" iA
 \mid 
endsnippet

context math(context)
snippet cc "subset" Ai
\subset 
endsnippet

snippet notin "not in " iA
\not\in 
endsnippet

context math(context)
snippet inn "in " iA
\in 
endsnippet

snippet NN "n" iA
\N
endsnippet

snippet Nn "cap" iA
\cap 
endsnippet

snippet UU "cup" iA
\cup 
endsnippet

snippet uuu "bigcup" iA
\bigcup_{${1:i \in ${2: I}}} $0
endsnippet

snippet nnn "bigcap" iA
\bigcap_{${1:i \in ${2: I}}} $0
endsnippet

snippet OO "emptyset" iA
\O
endsnippet

snippet RR "real" iA
\R
endsnippet

snippet QQ "Q" iA
\Q
endsnippet

snippet ZZ "Z" iA
\Z
endsnippet

snippet <! "normal" iA
\triangleleft 
endsnippet

snippet <> "hokje" iA
\diamond 
endsnippet


context math(context)
snippet `(?<!i)sts` "text subscript" iA
_\text{$1} $0
endsnippet

context math(context)
snippet tt "text" iA
\text{$1}$0
endsnippet

context math(context)
snippet case "cases" wA
\begin{cases}
	$1
\end{cases}
endsnippet

snippet SI "SI" iA
\SI{$1}{$2}
endsnippet

snippet bigfun "Big function" iA
\begin{align*}
	$1: $2 &\longrightarrow $3 \\\\
	$4 &\longmapsto $1($4) = $0
.\end{align*}
endsnippet

snippet cvec "column vector" iA
\begin{pmatrix} ${1:x}_${2:1}\\\\ \vdots\\\\ $1_${2:n} \end{pmatrix}
endsnippet

priority 10
context math(context)
snippet bar "bar" iA
\overline{$1}$0
endsnippet

priority 100
context math(context)
snippet `([a-zA-Z])bar` "bar" iA
\overline{``rv=m[1]``}
endsnippet

priority 10
context math(context)
snippet hat "hat" iA
\hat{$1}$0
endsnippet

priority 100
context math(context)
snippet `([a-zA-Z])hat` "hat" iA
\hat{`` rv=m[1]``}
endsnippet

snippet letw "let omega" iA
Let $\Omega \subset \C$ be open.
endsnippet


snippet HH "H" iA
\mathbb{H}
endsnippet

snippet DD "D" iA
\mathbb{D}
endsnippet

#
# Added by fer
#

snippet \sec "\section*{}" iA
\section*{$1}$2
endsnippet
template
context math(context)
snippet `\.\.((.|\n)*)\.\.` wAM
``
let r = m[1];
try {

	const math = myImport('/math-expressions/build/math-expressions')
	const latexInput = m[1]
	output = math.context.fromLatex(latexInput).evaluate();
	r = output;
} catch (error) {
	r = '>>'+r+'<<'+' '+error;
}
rv = r
``
endsnippet

snippet img "Figure environment" b
\begin{center}
	\includegraphics[width=${2:0.8}\textwidth]{${1:fig.png}}
\end{center}

endsnippet

context math(context)
snippet ww "omega" wA
\omega
endsnippet

snippet bold "bold" iA
\textbf{$1}$0
endsnippet

snippet italic "italic" iA
\textit{$1}$0
endsnippet

snippet \\\\ "\\" iA
\\\\\ \\\\
endsnippet

snippet `(\[.*\])\.toLatex` "toLatex()" Ai
\begin{pmatrix} 
``
rv = vecToPmat(m[1])
`` 
\end{pmatrix} 
endsnippet